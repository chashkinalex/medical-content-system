const winston = require('winston');
const path = require('path');

/**
 * –õ–æ–≥–≥–µ—Ä –¥–ª—è Medical Content System
 */
class Logger {
    constructor() {
        this.logger = this.createLogger();
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ª–æ–≥–≥–µ—Ä–∞
     */
    createLogger() {
        const logFormat = winston.format.combine(
            winston.format.timestamp({
                format: 'YYYY-MM-DD HH:mm:ss'
            }),
            winston.format.errors({ stack: true }),
            winston.format.json(),
            winston.format.printf(({ timestamp, level, message, stack, ...meta }) => {
                let log = `${timestamp} [${level.toUpperCase()}] ${message}`;
                
                if (Object.keys(meta).length > 0) {
                    log += ` ${JSON.stringify(meta)}`;
                }
                
                if (stack) {
                    log += `\n${stack}`;
                }
                
                return log;
            })
        );

        const consoleFormat = winston.format.combine(
            winston.format.colorize(),
            winston.format.timestamp({
                format: 'HH:mm:ss'
            }),
            winston.format.printf(({ timestamp, level, message, stack }) => {
                let log = `${timestamp} ${level} ${message}`;
                if (stack) {
                    log += `\n${stack}`;
                }
                return log;
            })
        );

        return winston.createLogger({
            level: process.env.LOG_LEVEL || 'info',
            format: logFormat,
            defaultMeta: { service: 'medical-content-system' },
            transports: [
                // –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
                new winston.transports.Console({
                    format: consoleFormat
                }),
                
                // –§–∞–π–ª–æ–≤—ã–π –≤—ã–≤–æ–¥ –¥–ª—è –≤—Å–µ—Ö –ª–æ–≥–æ–≤
                new winston.transports.File({
                    filename: path.join(__dirname, '../../logs/system.log'),
                    maxsize: 10 * 1024 * 1024, // 10MB
                    maxFiles: 5,
                    format: logFormat
                }),
                
                // –§–∞–π–ª–æ–≤—ã–π –≤—ã–≤–æ–¥ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—à–∏–±–æ–∫
                new winston.transports.File({
                    filename: path.join(__dirname, '../../logs/error.log'),
                    level: 'error',
                    maxsize: 10 * 1024 * 1024, // 10MB
                    maxFiles: 5,
                    format: logFormat
                })
            ],
            exceptionHandlers: [
                new winston.transports.File({
                    filename: path.join(__dirname, '../../logs/exceptions.log')
                })
            ],
            rejectionHandlers: [
                new winston.transports.File({
                    filename: path.join(__dirname, '../../logs/rejections.log')
                })
            ]
        });
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
     */
    info(message, meta = {}) {
        this.logger.info(message, meta);
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
     */
    warn(message, meta = {}) {
        this.logger.warn(message, meta);
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
     */
    error(message, error = null, meta = {}) {
        if (error instanceof Error) {
            this.logger.error(message, { 
                error: error.message, 
                stack: error.stack,
                ...meta 
            });
        } else {
            this.logger.error(message, { error, ...meta });
        }
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
     */
    debug(message, meta = {}) {
        this.logger.debug(message, meta);
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
     */
    success(message, meta = {}) {
        this.logger.info(`‚úÖ ${message}`, meta);
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
     */
    start(message, meta = {}) {
        this.logger.info(`üöÄ ${message}`, meta);
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
     */
    complete(message, meta = {}) {
        this.logger.info(`‚úÖ ${message}`, meta);
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
     */
    progress(current, total, message, meta = {}) {
        const percentage = Math.round((current / total) * 100);
        this.logger.info(`üìä ${message} (${current}/${total} - ${percentage}%)`, meta);
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    stats(stats, meta = {}) {
        this.logger.info('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', { stats, ...meta });
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
     */
    content(type, data, meta = {}) {
        this.logger.info(`üìù ${type}:`, { data, ...meta });
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–ø—Ä–æ—Å–æ–≤
     */
    api(method, url, status, duration, meta = {}) {
        this.logger.info(`üåê ${method} ${url} - ${status} (${duration}ms)`, meta);
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
     */
    database(operation, table, duration, meta = {}) {
        this.logger.info(`üóÑÔ∏è ${operation} ${table} (${duration}ms)`, meta);
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram
     */
    telegram(action, channel, result, meta = {}) {
        this.logger.info(`üì± Telegram ${action} ${channel}: ${result}`, meta);
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ RSS
     */
    rss(feed, articles, meta = {}) {
        this.logger.info(`üì° RSS ${feed}: ${articles} —Å—Ç–∞—Ç–µ–π`, meta);
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–æ—Ä–∏–Ω–≥–∞
     */
    scoring(article, score, meta = {}) {
        this.logger.info(`üìä –°–∫–æ—Ä–∏–Ω–≥: ${score}/${this.getMaxScore()} - ${article}`, meta);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–ª–∞ —Å–∫–æ—Ä–∏–Ω–≥–∞
     */
    getMaxScore() {
        return parseInt(process.env.SCORING_MAX) || 25;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ—á–µ—Ä–Ω–µ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
     */
    child(defaultMeta) {
        return this.logger.child(defaultMeta);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞ Winston
     */
    getWinstonLogger() {
        return this.logger;
    }
}

module.exports = Logger;
