#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–±–æ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 */

const path = require('path');
const fs = require('fs');
require('dotenv').config();

// –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
process.env.NODE_PATH = path.join(__dirname, '..');
require('module')._initPaths();

const ContentCollector = require('../src/collectors/content-collector');
const Database = require('../src/utils/database');
const Logger = require('../src/utils/logger');

async function testCollection() {
    const logger = new Logger();
    
    try {
        logger.start('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞');
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        const feedsConfig = JSON.parse(fs.readFileSync(
            path.join(__dirname, '../config/rss-feeds.json'), 'utf8'
        ));
        
        const specializationsConfig = JSON.parse(fs.readFileSync(
            path.join(__dirname, '../config/specializations.json'), 'utf8'
        ));
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const database = new Database();
        await database.initialize(process.env.DATABASE_URL || 'sqlite:./data/content.db');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–±–æ—Ä—â–∏–∫–∞
        const collector = new ContentCollector();
        await collector.initialize(feedsConfig, specializationsConfig);
        
        // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∞ –∏–∑ –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        logger.info('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∞ –∏–∑ –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞...');
        const testFeed = feedsConfig.feeds.find(feed => feed.id === 'nejm');
        
        if (testFeed) {
            const articles = await collector.collectFromSource(testFeed, {
                skipContentExtraction: true, // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
                maxArticles: 5
            });
            
            logger.success(`–°–æ–±—Ä–∞–Ω–æ ${articles.length} —Å—Ç–∞—Ç–µ–π –∏–∑ ${testFeed.name}`);
            
            // –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–∞—Ç—å—è—Ö
            articles.forEach((article, index) => {
                logger.info(`–°—Ç–∞—Ç—å—è ${index + 1}:`, {
                    title: article.title.substring(0, 100) + '...',
                    journal: article.journal,
                    specialization: article.specialization,
                    published_date: article.published_date
                });
            });
        }
        
        // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∞ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
        logger.info('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∞ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏...');
        const cardiologyArticles = await collector.collectBySpecialization('cardiology', {
            skipContentExtraction: true,
            maxArticles: 3
        });
        
        logger.success(`–°–æ–±—Ä–∞–Ω–æ ${cardiologyArticles.length} —Å—Ç–∞—Ç–µ–π –ø–æ –∫–∞—Ä–¥–∏–æ–ª–æ–≥–∏–∏`);
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        logger.info('üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
        const stats = await collector.getCollectionStats();
        
        logger.info('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±–æ—Ä–∞:', {
            totalSources: stats.length,
            sourcesWithArticles: stats.filter(s => s.articles_count > 0).length
        });
        
        // –í—ã–≤–æ–¥ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats.forEach(stat => {
            logger.info(`–ò—Å—Ç–æ—á–Ω–∏–∫: ${stat.source_name}`, {
                specialization: stat.specialization,
                articles: stat.articles_count,
                lastCollection: stat.last_collection
            });
        });
        
        logger.complete('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–±–æ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', error);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (require.main === module) {
    testCollection();
}

module.exports = testCollection;
