#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è–º
 */

const fs = require('fs');
const path = require('path');

function listAllSources() {
    console.log('üìö –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n');
    
    try {
        // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        const feedsConfig = JSON.parse(fs.readFileSync(
            path.join(__dirname, '../config/rss-feeds.json'), 'utf8'
        ));
        
        const allFeeds = feedsConfig.feeds;
        
        // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è–º
        const feedsBySpecialization = {};
        allFeeds.forEach(feed => {
            if (!feedsBySpecialization[feed.specialization]) {
                feedsBySpecialization[feed.specialization] = [];
            }
            feedsBySpecialization[feed.specialization].push(feed);
        });
        
        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π
        const specializations = Object.keys(feedsBySpecialization).sort();
        
        // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        console.log('üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
        console.log(`–í—Å–µ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: ${allFeeds.length}`);
        console.log(`–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π: ${specializations.length}`);
        console.log('');
        
        // –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è–º
        specializations.forEach(spec => {
            const feeds = feedsBySpecialization[spec];
            const journalFeeds = feeds.filter(f => !f.tags.includes('telegram'));
            const telegramFeeds = feeds.filter(f => f.tags.includes('telegram'));
            
            console.log(`üè• ${spec.toUpperCase()} (${feeds.length} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤)`);
            console.log(`   üìö –ñ—É—Ä–Ω–∞–ª—ã/–û–±—â–µ—Å—Ç–≤–∞: ${journalFeeds.length}`);
            console.log(`   üì± Telegram –∫–∞–Ω–∞–ª—ã: ${telegramFeeds.length}`);
            console.log('');
        });
        
        // –î–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è–º
        specializations.forEach(spec => {
            const feeds = feedsBySpecialization[spec];
            const journalFeeds = feeds.filter(f => !f.tags.includes('telegram'));
            const telegramFeeds = feeds.filter(f => f.tags.includes('telegram'));
            
            console.log(`\nüè• ${spec.toUpperCase()} (${feeds.length} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤)`);
            console.log('='.repeat(50));
            
            if (journalFeeds.length > 0) {
                console.log('\nüìö –ñ—É—Ä–Ω–∞–ª—ã –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ–±—â–µ—Å—Ç–≤–∞:');
                journalFeeds.forEach(feed => {
                    const level = feed.level || 'B';
                    const tags = feed.tags ? feed.tags.join(', ') : '';
                    console.log(`   ${level} ${feed.name}`);
                    console.log(`      URL: ${feed.url}`);
                    console.log(`      –¢–µ–≥–∏: ${tags}`);
                    console.log('');
                });
            }
            
            if (telegramFeeds.length > 0) {
                console.log('\nüì± Telegram –∫–∞–Ω–∞–ª—ã:');
                telegramFeeds.forEach(feed => {
                    console.log(`   ${feed.name}`);
                    console.log(`      URL: ${feed.url}`);
                    console.log('');
                });
            }
        });
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º
        console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º:');
        const levelStats = {};
        allFeeds.forEach(feed => {
            const level = feed.level || 'B';
            if (!levelStats[level]) {
                levelStats[level] = 0;
            }
            levelStats[level]++;
        });
        
        Object.keys(levelStats).sort().forEach(level => {
            console.log(`   –£—Ä–æ–≤–µ–Ω—å ${level}: ${levelStats[level]} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤`);
        });
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ–≥–∞–º
        console.log('\nüè∑Ô∏è –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–µ–≥–∏:');
        const tagStats = {};
        allFeeds.forEach(feed => {
            if (feed.tags) {
                feed.tags.forEach(tag => {
                    if (!tagStats[tag]) {
                        tagStats[tag] = 0;
                    }
                    tagStats[tag]++;
                });
            }
        });
        
        Object.entries(tagStats)
            .sort((a, b) => b[1] - a[1])
            .slice(0, 10)
            .forEach(([tag, count]) => {
                console.log(`   ${tag}: ${count} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤`);
            });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error.message);
    }
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
    listAllSources();
}

module.exports = listAllSources;
