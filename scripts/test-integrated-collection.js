#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å–±–æ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 * –∏–∑ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∂—É—Ä–Ω–∞–ª–æ–≤ –∏ Telegram –∫–∞–Ω–∞–ª–æ–≤
 */

const path = require('path');
const fs = require('fs');
const ContentCollector = require('../src/collectors/content-collector');
const Logger = require('../src/utils/logger');

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
const logger = new Logger();

async function testIntegratedCollection() {
    logger.info('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å–±–æ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞');
    
    try {
        // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        const feedsConfig = JSON.parse(fs.readFileSync(
            path.join(__dirname, '../config/rss-feeds.json'), 'utf8'
        ));
        
        const specializationsConfig = JSON.parse(fs.readFileSync(
            path.join(__dirname, '../config/specializations.json'), 'utf8'
        ));
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–±–æ—Ä—â–∏–∫–∞
        const collector = new ContentCollector();
        await collector.initialize(feedsConfig, specializationsConfig);
        
        // –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        const allFeeds = feedsConfig.feeds;
        const journalFeeds = allFeeds.filter(feed => !feed.tags.includes('telegram'));
        const telegramFeeds = allFeeds.filter(feed => feed.tags.includes('telegram'));
        
        logger.info('üìä –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:', {
            totalFeeds: allFeeds.length,
            journalFeeds: journalFeeds.length,
            telegramFeeds: telegramFeeds.length
        });
        
        // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è–º
        const feedsBySpecialization = {};
        allFeeds.forEach(feed => {
            if (!feedsBySpecialization[feed.specialization]) {
                feedsBySpecialization[feed.specialization] = {
                    journals: [],
                    telegram: []
                };
            }
            
            if (feed.tags.includes('telegram')) {
                feedsBySpecialization[feed.specialization].telegram.push(feed);
            } else {
                feedsBySpecialization[feed.specialization].journals.push(feed);
            }
        });
        
        // –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è–º
        logger.info('\nüìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è–º:');
        Object.entries(feedsBySpecialization).forEach(([spec, feeds]) => {
            logger.info(`  ${spec}:`, {
                journals: feeds.journals.length,
                telegram: feeds.telegram.length,
                total: feeds.journals.length + feeds.telegram.length
            });
        });
        
        // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∞ –∏–∑ –∂—É—Ä–Ω–∞–ª–æ–≤ (—Ç–æ–ª—å–∫–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∞)
        logger.info('\nüìö –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∞ –∏–∑ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∂—É—Ä–Ω–∞–ª–æ–≤...');
        const testJournalFeeds = journalFeeds.slice(0, 3); // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –¥–ª—è —Ç–µ—Å—Ç–∞
        
        for (const feed of testJournalFeeds) {
            try {
                logger.info(`üì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞: ${feed.name}`);
                const articles = await collector.collectFromSource(feed, {
                    skipContentExtraction: true, // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
                    maxArticles: 2 // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π –¥–ª—è —Ç–µ—Å—Ç–∞
                });
                
                logger.success(`‚úÖ ${feed.name}: —Å–æ–±—Ä–∞–Ω–æ ${articles.length} —Å—Ç–∞—Ç–µ–π`);
                
                if (articles.length > 0) {
                    const article = articles[0];
                    logger.info(`  –ü—Ä–∏–º–µ—Ä —Å—Ç–∞—Ç—å–∏: "${article.title}"`);
                    logger.info(`  –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: ${article.specialization}`);
                    logger.info(`  –ñ—É—Ä–Ω–∞–ª: ${article.journal}`);
                }
            } catch (error) {
                logger.error(`‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –∏–∑ ${feed.name}:`, error.message);
            }
        }
        
        // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram RSS-—Ñ–∏–¥–æ–≤ (–µ—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞)
        logger.info('\nüì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram RSS-—Ñ–∏–¥–æ–≤...');
        const testTelegramFeeds = telegramFeeds.slice(0, 2); // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 2 –¥–ª—è —Ç–µ—Å—Ç–∞
        
        for (const feed of testTelegramFeeds) {
            try {
                logger.info(`üì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram: ${feed.name}`);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å RSS-—Ñ–∏–¥–∞
                const axios = require('axios');
                const response = await axios.get(feed.url, { timeout: 5000 });
                
                if (response.status === 200) {
                    logger.success(`‚úÖ ${feed.name}: RSS-—Ñ–∏–¥ –¥–æ—Å—Ç—É–ø–µ–Ω`);
                    
                    // –ü—Ä–æ–±—É–µ–º —Å–æ–±—Ä–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç
                    const articles = await collector.collectFromSource(feed, {
                        skipContentExtraction: true,
                        maxArticles: 1
                    });
                    
                    logger.success(`‚úÖ ${feed.name}: —Å–æ–±—Ä–∞–Ω–æ ${articles.length} –ø–æ—Å—Ç–æ–≤`);
                    
                    if (articles.length > 0) {
                        const article = articles[0];
                        logger.info(`  –ü—Ä–∏–º–µ—Ä –ø–æ—Å—Ç–∞: "${article.title}"`);
                        logger.info(`  –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: ${article.specialization}`);
                    }
                } else {
                    logger.warn(`‚ö†Ô∏è ${feed.name}: RSS-—Ñ–∏–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å: ${response.status})`);
                }
            } catch (error) {
                if (error.code === 'ECONNREFUSED') {
                    logger.warn(`‚ö†Ô∏è ${feed.name}: Telegram-to-RSS —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞`);
                    logger.info('   –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É: npm run start:telegram');
                } else {
                    logger.error(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ${feed.name}:`, error.message);
                }
            }
        }
        
        // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∞ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
        logger.info('\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∞ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ (–∫–∞—Ä–¥–∏–æ–ª–æ–≥–∏—è)...');
        try {
            const cardiologyArticles = await collector.collectBySpecialization('cardiology', {
                skipContentExtraction: true,
                maxArticles: 3
            });
            
            logger.success(`‚úÖ –ö–∞—Ä–¥–∏–æ–ª–æ–≥–∏—è: —Å–æ–±—Ä–∞–Ω–æ ${cardiologyArticles.length} —Å—Ç–∞—Ç–µ–π/–ø–æ—Å—Ç–æ–≤`);
            
            // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
            const sources = {};
            cardiologyArticles.forEach(article => {
                if (!sources[article.source_id]) {
                    sources[article.source_id] = 0;
                }
                sources[article.source_id]++;
            });
            
            logger.info('  –ò—Å—Ç–æ—á–Ω–∏–∫–∏:', sources);
            
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏:', error.message);
        }
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        logger.info('\nüìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–±–æ—Ä–∞...');
        try {
            const stats = await collector.getCollectionStats();
            logger.info('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:');
            stats.forEach(stat => {
                logger.info(`  ${stat.source_name} (${stat.specialization}): ${stat.articles_count} —Å—Ç–∞—Ç–µ–π`);
            });
        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error.message);
        }
        
        logger.success('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
        
        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        logger.info('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
        logger.info('1. –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ Telegram-to-RSS: npm run start:telegram');
        logger.info('2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Telegram API credentials –≤ .env.telegram');
        logger.info('3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–ª–Ω—ã–π —Å–±–æ—Ä: npm run collect');
        logger.info('4. –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –ª–æ–≥–∏: tail -f logs/collection.log');
        
    } catch (error) {
        logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (require.main === module) {
    testIntegratedCollection();
}

module.exports = testIntegratedCollection;
