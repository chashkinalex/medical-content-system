#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è Telegram –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ Excel —Ñ–∞–π–ª–æ–≤
 */

const XLSX = require('xlsx');
const fs = require('fs');
const path = require('path');

// –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å —Ñ–∞–π–ª–∞–º–∏
const TARGETING_PATH = '/Users/alexchashkin/Downloads/–¢–∞—Ä–≥–µ—Ç–∏–Ω–≥–∏';

// –§–∞–π–ª—ã –ø–æ –Ω–∞—à–∏–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è–º
const SPECIALIZATION_FILES = {
    'cardiology': '–ö–∞—Ä–¥–∏–æ–ª–æ–≥–∏ ‚Äî –≥—Ä—É–ø–ø—ã –∏ –∫–∞–Ω–∞–ª—ã.xlsx',
    'pediatrics': '–ü–µ–¥–∏–∞—Ç—Ä—ã ‚Äî –≥—Ä—É–ø–ø—ã –∏ –∫–∞–Ω–∞–ª—ã.xlsx',
    'gastroenterology': '–ì–∞—Å—Ç—Ä–æ—ç–Ω—Ç–µ—Ä–æ–ª–æ–≥–∏/–ì–∞—Å—Ç—Ä–æ—ç–Ω—Ç–µ—Ä–æ–ª–æ–≥–∏—è - –≥—Ä—É–ø–ø—ã –∏ –∫–∞–Ω–∞–ª—ã.xlsx',
    'endocrinology': '–≠–Ω–¥–æ–∫—Ä–∏–Ω–æ–ª–æ–≥–∏.xlsx',
    'gynecology': '–ì–∏–Ω–µ–∫–æ–ª–æ–≥–∏ ‚Äî –≥—Ä—É–ø–ø—ã –∏ –∫–∞–Ω–∞–ª—ã.xlsx',
    'neurology': '–ö–∞–Ω–∞–ª—ã –ø–æ –Ω–µ–≤—Ä–æ–ª–æ–≥–∏–∏.xlsx',
    'therapy': '–¢–µ—Ä–∞–ø–µ–≤—Ç—ã - –≥—Ä—É–ø–ø—ã –∏ –∫–∞–Ω–∞–ª—ã.xlsx'
};

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ Excel —Ñ–∞–π–ª–∞
 */
function extractChannelsFromFile(filePath, specialization) {
    try {
        console.log(`üìñ –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: ${filePath}`);
        
        if (!fs.existsSync(filePath)) {
            console.log(`‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
            return [];
        }

        const workbook = XLSX.readFile(filePath);
        const channels = [];

        // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –ª–∏—Å—Ç—ã –≤ —Ñ–∞–π–ª–µ
        workbook.SheetNames.forEach(sheetName => {
            console.log(`üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏—Å—Ç–∞: ${sheetName}`);
            
            const worksheet = workbook.Sheets[sheetName];
            const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });

            // –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –∫–∞–Ω–∞–ª–∞–º–∏
            jsonData.forEach((row, rowIndex) => {
                if (Array.isArray(row)) {
                    row.forEach((cell, colIndex) => {
                        if (typeof cell === 'string') {
                            // –ò—â–µ–º Telegram –∫–∞–Ω–∞–ª—ã (–Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å @ –∏–ª–∏ t.me)
                            const channelMatch = cell.match(/(?:@|t\.me\/)([a-zA-Z0-9_]+)/g);
                            if (channelMatch) {
                                channelMatch.forEach(match => {
                                    let channelName = match.replace(/^@/, '').replace(/^t\.me\//, '');
                                    if (channelName && !channels.includes(channelName)) {
                                        channels.push(channelName);
                                        console.log(`  ‚úÖ –ù–∞–π–¥–µ–Ω –∫–∞–Ω–∞–ª: @${channelName}`);
                                    }
                                });
                            }
                        }
                    });
                }
            });
        });

        return channels;
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${filePath}:`, error.message);
        return [];
    }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
    console.log('üöÄ –ù–∞—á–∞–ª–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è Telegram –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ Excel —Ñ–∞–π–ª–æ–≤\n');

    const allChannels = {};

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    for (const [specialization, fileName] of Object.entries(SPECIALIZATION_FILES)) {
        console.log(`\nüìÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏: ${specialization}`);
        console.log(`üìÑ –§–∞–π–ª: ${fileName}`);
        
        const filePath = path.join(TARGETING_PATH, fileName);
        const channels = extractChannelsFromFile(filePath, specialization);
        
        allChannels[specialization] = channels;
        
        console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: ${channels.length}`);
        if (channels.length > 0) {
            console.log(`üìã –ö–∞–Ω–∞–ª—ã: ${channels.map(c => `@${c}`).join(', ')}`);
        }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const outputPath = path.join(__dirname, '../config/telegram-channels.json');
    fs.writeFileSync(outputPath, JSON.stringify(allChannels, null, 2));
    
    console.log(`\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${outputPath}`);
    
    // –í—ã–≤–æ–¥–∏–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    Object.entries(allChannels).forEach(([spec, channels]) => {
        console.log(`  ${spec}: ${channels.length} –∫–∞–Ω–∞–ª–æ–≤`);
    });
    
    const totalChannels = Object.values(allChannels).reduce((sum, channels) => sum + channels.length, 0);
    console.log(`\nüéØ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: ${totalChannels}`);
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
    main().catch(console.error);
}

module.exports = { extractChannelsFromFile, SPECIALIZATION_FILES };
