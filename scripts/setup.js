#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã
 */

const fs = require('fs');
const path = require('path');
require('dotenv').config();

const Database = require('../src/utils/database');
const Logger = require('../src/utils/logger');

async function setup() {
    const logger = new Logger();
    
    try {
        logger.start('–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Medical Content System');
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞ .env
        const envPath = path.join(__dirname, '../.env');
        if (!fs.existsSync(envPath)) {
            logger.warn('–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑ env.example...');
            
            const envExamplePath = path.join(__dirname, '../env.example');
            if (fs.existsSync(envExamplePath)) {
                fs.copyFileSync(envExamplePath, envPath);
                logger.success('–§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω –∏–∑ env.example');
                logger.info('‚ö†Ô∏è  –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å .env —Ñ–∞–π–ª —Å –≤–∞—à–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏!');
            } else {
                logger.error('–§–∞–π–ª env.example –Ω–µ –Ω–∞–π–¥–µ–Ω!');
                process.exit(1);
            }
        }
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        logger.info('–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...');
        const directories = [
            'data',
            'logs',
            'cache',
            'output',
            'backups',
            'templates',
            'visuals'
        ];
        
        for (const dir of directories) {
            const dirPath = path.join(__dirname, '..', dir);
            if (!fs.existsSync(dirPath)) {
                fs.mkdirSync(dirPath, { recursive: true });
                logger.info(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${dir}`);
            }
        }
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        logger.info('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
        const database = new Database();
        await database.initialize(process.env.DATABASE_URL || 'sqlite:./data/content.db');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        logger.info('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...');
        const initSources = require('./init-sources');
        await initSources();
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        logger.info('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...');
        await checkConfiguration();
        
        // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
        logger.info('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã...');
        await testSystem();
        
        logger.complete('–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
        logger.info('üéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!');
        logger.info('üìö –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
        logger.info('  1. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª —Å –≤–∞—à–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏');
        logger.info('  2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Telegram –±–æ—Ç–∞ –∏ –∫–∞–Ω–∞–ª');
        logger.info('  3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç —Å–±–æ—Ä–∞: npm run collect:test');
        logger.info('  4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–æ–ª–Ω—ã–π —Å–±–æ—Ä: npm run collect');
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã:', error);
        process.exit(1);
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
 */
async function checkConfiguration() {
    const logger = new Logger();
    
    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        const configFiles = [
            'config/rss-feeds.json',
            'config/specializations.json',
            'config/post-templates.json'
        ];
        
        for (const configFile of configFiles) {
            const configPath = path.join(__dirname, '..', configFile);
            if (fs.existsSync(configPath)) {
                logger.info(`‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞: ${configFile}`);
                
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ JSON
                try {
                    const config = JSON.parse(fs.readFileSync(configPath, 'utf8'));
                    logger.info(`   - –ó–∞–ø–∏—Å–µ–π: ${Object.keys(config).length}`);
                } catch (error) {
                    logger.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ${configFile}:`, error);
                }
            } else {
                logger.error(`‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${configFile}`);
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        const requiredEnvVars = [
            'TELEGRAM_BOT_TOKEN',
            'TELEGRAM_CHANNEL_ID'
        ];
        
        logger.info('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...');
        for (const envVar of requiredEnvVars) {
            if (process.env[envVar] && process.env[envVar] !== `your_${envVar.toLowerCase()}_here`) {
                logger.info(`‚úÖ ${envVar}: –Ω–∞—Å—Ç—Ä–æ–µ–Ω`);
            } else {
                logger.warn(`‚ö†Ô∏è  ${envVar}: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω`);
            }
        }
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
    }
}

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
 */
async function testSystem() {
    const logger = new Logger();
    
    try {
        // –¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        logger.info('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
        const database = new Database();
        await database.initialize(process.env.DATABASE_URL || 'sqlite:./data/content.db');
        
        const sources = await database.all('SELECT COUNT(*) as count FROM sources');
        logger.info(`‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${sources[0].count} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤`);
        
        // –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ RSS
        logger.info('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ RSS...');
        const feedsConfig = JSON.parse(fs.readFileSync(
            path.join(__dirname, '../config/rss-feeds.json'), 'utf8'
        ));
        logger.info(`‚úÖ RSS-—Ñ–∏–¥—ã: ${feedsConfig.feeds.length} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤`);
        
        // –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π
        logger.info('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–µ–π...');
        const specializationsConfig = JSON.parse(fs.readFileSync(
            path.join(__dirname, '../config/specializations.json'), 'utf8'
        ));
        logger.info(`‚úÖ –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏: ${Object.keys(specializationsConfig.specializations).length} –∫–∞—Ñ–µ–¥—Ä`);
        
        // –¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤
        logger.info('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤...');
        const templatesConfig = JSON.parse(fs.readFileSync(
            path.join(__dirname, '../config/post-templates.json'), 'utf8'
        ));
        logger.info(`‚úÖ –®–∞–±–ª–æ–Ω—ã: ${Object.keys(templatesConfig.templates).length} —Ç–∏–ø–æ–≤ –ø–æ—Å—Ç–æ–≤`);
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã:', error);
    }
}

// –ó–∞–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
if (require.main === module) {
    setup();
}

module.exports = setup;
