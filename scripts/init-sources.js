#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 */

const path = require('path');
const fs = require('fs');
require('dotenv').config();

const Database = require('../src/utils/database');
const Logger = require('../src/utils/logger');

async function initializeSources() {
    const logger = new Logger();
    
    try {
        logger.start('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ RSS-—Ñ–∏–¥–æ–≤
        const feedsConfig = JSON.parse(fs.readFileSync(
            path.join(__dirname, '../config/rss-feeds.json'), 'utf8'
        ));
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const database = new Database();
        await database.initialize(process.env.DATABASE_URL || 'sqlite:./data/content.db');
        
        // –û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        logger.info('–û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...');
        await database.run('DELETE FROM sources');
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        logger.info('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...');
        let addedCount = 0;
        
        for (const feed of feedsConfig.feeds) {
            try {
                await database.run(`
                    INSERT INTO sources (
                        name, url, type, level, specialization, language, enabled, last_checked
                    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                `, [
                    feed.name,
                    feed.url,
                    feed.type || 'rss',
                    feed.level,
                    feed.specialization,
                    feed.language,
                    feed.enabled ? 1 : 0,
                    null
                ]);
                
                addedCount++;
                logger.info(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∏—Å—Ç–æ—á–Ω–∏–∫: ${feed.name} (${feed.specialization})`);
            } catch (error) {
                logger.error(`‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ ${feed.name}:`, error);
            }
        }
        
        logger.success(`–î–æ–±–∞–≤–ª–µ–Ω–æ ${addedCount} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤`);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        const sources = await database.all('SELECT * FROM sources ORDER BY specialization, name');
        
        logger.info('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è–º:');
        const specializationStats = {};
        
        sources.forEach(source => {
            if (!specializationStats[source.specialization]) {
                specializationStats[source.specialization] = 0;
            }
            specializationStats[source.specialization]++;
        });
        
        Object.entries(specializationStats).forEach(([spec, count]) => {
            logger.info(`  ${spec}: ${count} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤`);
        });
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º
        logger.info('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º:');
        const levelStats = {};
        
        sources.forEach(source => {
            if (!levelStats[source.level]) {
                levelStats[source.level] = 0;
            }
            levelStats[source.level]++;
        });
        
        Object.entries(levelStats).forEach(([level, count]) => {
            logger.info(`  –£—Ä–æ–≤–µ–Ω—å ${level}: ${count} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤`);
        });
        
        logger.complete('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:', error);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
if (require.main === module) {
    initializeSources();
}

module.exports = initializeSources;
