#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–æ–≤ –Ω–∞ –ø—Ä–µ–º–æ–¥–µ—Ä–∞—Ü–∏—é
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 10:00
 */

const ModerationBot = require('../src/bots/moderation-bot');
const Database = require('../src/utils/database');
const Logger = require('../src/utils/logger');

class ModerationScheduler {
    constructor() {
        this.logger = new Logger();
        this.database = new Database();
        this.moderationBot = new ModerationBot();
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–æ–≤ –Ω–∞ –ø—Ä–µ–º–æ–¥–µ—Ä–∞—Ü–∏—é
     */
    async sendPostsForModeration() {
        try {
            this.logger.info('–ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ø–æ—Å—Ç–æ–≤ –Ω–∞ –ø—Ä–µ–º–æ–¥–µ—Ä–∞—Ü–∏—é...');

            // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç—ã –Ω–∞ –ø—Ä–µ–º–æ–¥–µ—Ä–∞—Ü–∏—é
            const posts = await this.database.getPostsForModeration();
            
            if (posts.length === 0) {
                this.logger.info('–ù–µ—Ç –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–µ–º–æ–¥–µ—Ä–∞—Ü–∏–∏');
                return;
            }

            this.logger.info(`–ù–∞–π–¥–µ–Ω–æ ${posts.length} –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–µ–º–æ–¥–µ—Ä–∞—Ü–∏–∏`);

            // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è–º
            const postsBySpecialization = this.groupPostsBySpecialization(posts);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É
            await this.moderationBot.notifyModerationSession();

            // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            this.logStats(postsBySpecialization);

            this.logger.info('–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–æ–≤ –Ω–∞ –ø—Ä–µ–º–æ–¥–µ—Ä–∞—Ü–∏—é –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

        } catch (error) {
            this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–æ–≤ –Ω–∞ –ø—Ä–µ–º–æ–¥–µ—Ä–∞—Ü–∏—é:', error);
        }
    }

    /**
     * –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ—Å—Ç–æ–≤ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è–º
     */
    groupPostsBySpecialization(posts) {
        const grouped = {};
        
        posts.forEach(post => {
            if (!grouped[post.specialization]) {
                grouped[post.specialization] = [];
            }
            grouped[post.specialization].push(post);
        });

        return grouped;
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    logStats(postsBySpecialization) {
        this.logger.info('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å—Ç–æ–≤ –Ω–∞ –ø—Ä–µ–º–æ–¥–µ—Ä–∞—Ü–∏—é:');
        
        Object.entries(postsBySpecialization).forEach(([specialization, posts]) => {
            this.logger.info(`  ${specialization}: ${posts.length} –ø–æ—Å—Ç–æ–≤`);
        });

        const totalPosts = Object.values(postsBySpecialization).reduce((sum, posts) => sum + posts.length, 0);
        this.logger.info(`  –í—Å–µ–≥–æ: ${totalPosts} –ø–æ—Å—Ç–æ–≤`);
    }

    /**
     * –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞
     */
    async run() {
        try {
            await this.database.initialize();
            await this.sendPostsForModeration();
        } catch (error) {
            this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–µ–º–æ–¥–µ—Ä–∞—Ü–∏–∏:', error);
        }
    }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    const scheduler = new ModerationScheduler();
    scheduler.run();
}

module.exports = ModerationScheduler;
