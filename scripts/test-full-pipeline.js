#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —ç—Ç–∞–ø—ã: —Å–±–æ—Ä ‚Üí –æ–±—Ä–∞–±–æ—Ç–∫–∞ ‚Üí —Å–∫–æ—Ä–∏–Ω–≥ ‚Üí –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
 */

const ContentCollector = require('../src/collectors/content-collector');
const ContentProcessor = require('./process');
const ContentScorer = require('./score');
const PostGenerator = require('./generate');
const Database = require('../src/utils/database');
const Logger = require('../src/utils/logger');

class PipelineTester {
    constructor() {
        this.logger = new Logger();
        this.database = new Database();
        this.collector = new ContentCollector();
        this.processor = new ContentProcessor();
        this.scorer = new ContentScorer();
        this.generator = new PostGenerator();
    }

    /**
     * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞
     */
    async testFullPipeline() {
        try {
            this.logger.info('üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞...');
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            await this.database.initialize();
            
            // –≠—Ç–∞–ø 1: –°–±–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            await this.testContentCollection();
            
            // –≠—Ç–∞–ø 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            await this.testContentProcessing();
            
            // –≠—Ç–∞–ø 3: –°–∫–æ—Ä–∏–Ω–≥ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            await this.testContentScoring();
            
            // –≠—Ç–∞–ø 4: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤
            await this.testPostGeneration();
            
            // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            await this.showFinalStatistics();
            
            this.logger.info('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
            
        } catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∞–π–ø–ª–∞–π–Ω–∞:', error);
        }
    }

    /**
     * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
     */
    async testContentCollection() {
        this.logger.info('üì• –≠—Ç–∞–ø 1: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...');
        
        try {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞
            await this.collector.initialize();
            
            // –°–±–æ—Ä —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            const testSources = await this.database.getTestSources(3); // –ë–µ—Ä–µ–º 3 –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∞
            
            let collectedCount = 0;
            for (const source of testSources) {
                try {
                    const result = await this.collector.collectFromSource(source);
                    if (result && result.articles && result.articles.length > 0) {
                        collectedCount += result.articles.length;
                        this.logger.info(`  ‚úÖ ${source.name}: ${result.articles.length} —Å—Ç–∞—Ç–µ–π`);
                    } else {
                        this.logger.info(`  ‚ö†Ô∏è ${source.name}: 0 —Å—Ç–∞—Ç–µ–π`);
                    }
                } catch (error) {
                    this.logger.error(`  ‚ùå ${source.name}: –æ—à–∏–±–∫–∞ —Å–±–æ—Ä–∞`, error.message);
                }
            }
            
            this.logger.info(`üìä –°–æ–±—Ä–∞–Ω–æ —Å—Ç–∞—Ç–µ–π: ${collectedCount}`);
            
        } catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–±–æ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', error);
        }
    }

    /**
     * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
     */
    async testContentProcessing() {
        this.logger.info('‚öôÔ∏è –≠—Ç–∞–ø 2: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...');
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏
            const rawArticles = await this.database.getRawArticles();
            this.logger.info(`üìä –ù–∞–π–¥–µ–Ω–æ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π: ${rawArticles.length}`);
            
            if (rawArticles.length === 0) {
                this.logger.info('‚ö†Ô∏è –ù–µ—Ç –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
                return;
            }
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å—Ç–∞—Ç–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            const testArticles = rawArticles.slice(0, 5);
            let processedCount = 0;
            
            for (const article of testArticles) {
                try {
                    const processedArticle = await this.processor.processArticle(article);
                    if (processedArticle) {
                        await this.database.saveProcessedArticle(processedArticle);
                        processedCount++;
                        this.logger.info(`  ‚úÖ –°—Ç–∞—Ç—å—è ${article.id}: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞`);
                    } else {
                        this.logger.info(`  ‚ö†Ô∏è –°—Ç–∞—Ç—å—è ${article.id}: –ø—Ä–æ–ø—É—â–µ–Ω–∞`);
                    }
                } catch (error) {
                    this.logger.error(`  ‚ùå –°—Ç–∞—Ç—å—è ${article.id}: –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏`, error.message);
                }
            }
            
            this.logger.info(`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç–∞—Ç–µ–π: ${processedCount}`);
            
        } catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', error);
        }
    }

    /**
     * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–æ—Ä–∏–Ω–≥–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
     */
    async testContentScoring() {
        this.logger.info('üìä –≠—Ç–∞–ø 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–æ—Ä–∏–Ω–≥–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...');
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ—Ü–µ–Ω–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏
            const unscoredArticles = await this.database.getUnscoredArticles();
            this.logger.info(`üìä –ù–∞–π–¥–µ–Ω–æ –Ω–µ–æ—Ü–µ–Ω–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π: ${unscoredArticles.length}`);
            
            if (unscoredArticles.length === 0) {
                this.logger.info('‚ö†Ô∏è –ù–µ—Ç –Ω–µ–æ—Ü–µ–Ω–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
                return;
            }
            
            // –û—Ü–µ–Ω–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å—Ç–∞—Ç–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            const testArticles = unscoredArticles.slice(0, 5);
            let scoredCount = 0;
            
            for (const article of testArticles) {
                try {
                    const score = await this.scorer.scoreArticle(article);
                    if (score) {
                        await this.database.saveArticleScore(article.id, score);
                        scoredCount++;
                        this.logger.info(`  ‚úÖ –°—Ç–∞—Ç—å—è ${article.id}: —Å–∫–æ—Ä–∏–Ω–≥ ${score.total_score}/25 (${score.quality_level})`);
                    } else {
                        this.logger.info(`  ‚ö†Ô∏è –°—Ç–∞—Ç—å—è ${article.id}: —Å–∫–æ—Ä–∏–Ω–≥ –ø—Ä–æ–ø—É—â–µ–Ω`);
                    }
                } catch (error) {
                    this.logger.error(`  ‚ùå –°—Ç–∞—Ç—å—è ${article.id}: –æ—à–∏–±–∫–∞ —Å–∫–æ—Ä–∏–Ω–≥–∞`, error.message);
                }
            }
            
            this.logger.info(`üìä –û—Ü–µ–Ω–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: ${scoredCount}`);
            
        } catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–∫–æ—Ä–∏–Ω–≥–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', error);
        }
    }

    /**
     * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤
     */
    async testPostGeneration() {
        this.logger.info('‚úçÔ∏è –≠—Ç–∞–ø 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤...');
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—å–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤
            const articlesForGeneration = await this.database.getArticlesForPostGeneration();
            this.logger.info(`üìä –ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${articlesForGeneration.length}`);
            
            if (articlesForGeneration.length === 0) {
                this.logger.info('‚ö†Ô∏è –ù–µ—Ç —Å—Ç–∞—Ç–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤');
                return;
            }
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Å—Ç—ã –¥–ª—è –ø–µ—Ä–≤—ã—Ö 3 —Å—Ç–∞—Ç–µ–π
            const testArticles = articlesForGeneration.slice(0, 3);
            let generatedCount = 0;
            
            for (const article of testArticles) {
                try {
                    const specialization = this.generator.determineSpecialization(article);
                    const post = await this.generator.generatePost(article, specialization);
                    if (post) {
                        await this.database.saveGeneratedPost(post);
                        generatedCount++;
                        this.logger.info(`  ‚úÖ –°—Ç–∞—Ç—å—è ${article.id} ‚Üí –ü–æ—Å—Ç –¥–ª—è ${specialization}`);
                    } else {
                        this.logger.info(`  ‚ö†Ô∏è –°—Ç–∞—Ç—å—è ${article.id}: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞`);
                    }
                } catch (error) {
                    this.logger.error(`  ‚ùå –°—Ç–∞—Ç—å—è ${article.id}: –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏`, error.message);
                }
            }
            
            this.logger.info(`üìä –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ—Å—Ç–æ–≤: ${generatedCount}`);
            
        } catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤:', error);
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
     */
    async showFinalStatistics() {
        this.logger.info('üìà –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞:');
        
        try {
            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—å—è–º
            const rawArticlesCount = await this.database.getRawArticlesCount();
            const processedArticlesCount = await this.database.getProcessedArticlesCount();
            const scoredArticlesCount = await this.database.getScoredArticlesCount();
            
            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ—Å—Ç–∞–º
            const generatedPostsCount = await this.database.getGeneratedPostsCount();
            const postsBySpecialization = await this.database.getPostsBySpecialization();
            
            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∫–æ—Ä–∏–Ω–≥—É
            const scoreDistribution = await this.database.getScoreDistribution();
            
            this.logger.info(`üìä –°—Ç–∞—Ç—å–∏:`);
            this.logger.info(`  ‚Ä¢ –°–æ–±—Ä–∞–Ω–æ: ${rawArticlesCount}`);
            this.logger.info(`  ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processedArticlesCount}`);
            this.logger.info(`  ‚Ä¢ –û—Ü–µ–Ω–µ–Ω–æ: ${scoredArticlesCount}`);
            
            this.logger.info(`üìä –ü–æ—Å—Ç—ã:`);
            this.logger.info(`  ‚Ä¢ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${generatedPostsCount}`);
            
            if (postsBySpecialization && Object.keys(postsBySpecialization).length > 0) {
                this.logger.info(`  ‚Ä¢ –ü–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è–º:`);
                Object.entries(postsBySpecialization).forEach(([spec, count]) => {
                    this.logger.info(`    - ${spec}: ${count}`);
                });
            }
            
            if (scoreDistribution && Object.keys(scoreDistribution).length > 0) {
                this.logger.info(`üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–∏–Ω–≥–∞:`);
                Object.entries(scoreDistribution).forEach(([level, count]) => {
                    this.logger.info(`  ‚Ä¢ –£—Ä–æ–≤–µ–Ω—å ${level}: ${count} —Å—Ç–∞—Ç–µ–π`);
                });
            }
            
        } catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    async cleanupTestData() {
        this.logger.info('üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
        
        try {
            await this.database.cleanupTestData();
            this.logger.info('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
        } catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    async run() {
        try {
            const args = process.argv.slice(2);
            
            if (args.includes('--cleanup')) {
                await this.cleanupTestData();
                return;
            }
            
            await this.testFullPipeline();
            
            if (args.includes('--cleanup-after')) {
                await this.cleanupTestData();
            }
            
        } catch (error) {
            this.logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
        }
    }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    const tester = new PipelineTester();
    tester.run();
}

module.exports = PipelineTester;
