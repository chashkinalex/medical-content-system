#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é: 8:00, 14:00, 20:00
 */

const TelegramBot = require('node-telegram-bot-api');
const Database = require('../src/utils/database');
const Logger = require('../src/utils/logger');

class PostPublisher {
    constructor() {
        this.logger = new Logger();
        this.database = new Database();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        this.bot = new TelegramBot(process.env.PUBLISHING_BOT_TOKEN, { polling: false });
        
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–∞–Ω–∞–ª–æ–≤
        this.channels = {
            'cardiology': process.env.CARDIOLOGY_CHANNEL_ID,
            'endocrinology': process.env.ENDOCRINOLOGY_CHANNEL_ID,
            'pediatrics': process.env.PEDIATRICS_CHANNEL_ID,
            'gastroenterology': process.env.GASTROENTEROLOGY_CHANNEL_ID,
            'gynecology': process.env.GYNECOLOGY_CHANNEL_ID,
            'neurology': process.env.NEUROLOGY_CHANNEL_ID,
            'therapy': process.env.THERAPY_CHANNEL_ID
        };

        // –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        this.schedule = {
            '8:00': ['research', 'guideline'],
            '14:00': ['news', 'update'],
            '20:00': ['practical', 'case']
        };
    }

    /**
     * –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
     */
    async publishApprovedPosts() {
        try {
            this.logger.info('–ù–∞—á–∏–Ω–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤...');

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∏ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            const currentTime = new Date();
            const timeKey = this.getTimeKey(currentTime);
            const contentTypes = this.schedule[timeKey] || ['general'];

            this.logger.info(`–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ${timeKey}, —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${contentTypes.join(', ')}`);

            // –ü–æ–ª—É—á–∞–µ–º –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            const posts = await this.database.getApprovedPostsForPublishing(contentTypes);
            
            if (posts.length === 0) {
                this.logger.info('–ù–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏');
                return;
            }

            this.logger.info(`–ù–∞–π–¥–µ–Ω–æ ${posts.length} –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏`);

            // –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç—ã
            for (const post of posts) {
                await this.publishPost(post);
                
                // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏ (30 —Å–µ–∫—É–Ω–¥)
                await new Promise(resolve => setTimeout(resolve, 30000));
            }

            this.logger.info('–ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

        } catch (error) {
            this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤:', error);
        }
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª—é—á–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
     */
    getTimeKey(currentTime) {
        const hour = currentTime.getHours();
        
        if (hour >= 7 && hour < 12) return '8:00';
        if (hour >= 12 && hour < 18) return '14:00';
        if (hour >= 18 && hour < 22) return '20:00';
        
        return '8:00'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }

    /**
     * –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
     */
    async publishPost(post) {
        try {
            const channelId = this.channels[post.specialization];
            
            if (!channelId) {
                this.logger.warn(`–ö–∞–Ω–∞–ª –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ ${post.specialization} –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω`);
                return;
            }

            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ—Å—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            const formattedPost = this.formatPostForPublishing(post);
            
            // –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç
            const message = await this.bot.sendMessage(channelId, formattedPost, {
                parse_mode: 'Markdown',
                disable_web_page_preview: false
            });

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            await this.database.updatePostPublishingStatus(post.id, 'published', message.message_id);

            this.logger.info(`–ü–æ—Å—Ç ${post.id} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ ${post.specialization}`);

        } catch (error) {
            this.logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ ${post.id}:`, error);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—à–∏–±–∫—É
            await this.database.updatePostPublishingStatus(post.id, 'error', null);
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
     */
    formatPostForPublishing(post) {
        const emoji = this.getPostEmoji(post.type);
        const specializationEmoji = this.getSpecializationEmoji(post.specialization);
        
        return `${emoji} **${post.title}**\n\n` +
               `üìã **–°—É—Ç—å:**\n${post.summary}\n\n` +
               `üîç **–ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã:**\n${this.formatKeyPoints(post.key_points)}\n\n` +
               `üí° **–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:**\n${post.practical_application}\n\n` +
               `üìö **–ò—Å—Ç–æ—á–Ω–∏–∫:** ${post.source_name}\n` +
               `üîó **–°—Å—ã–ª–∫–∞:** [–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é](${post.source_url})\n\n` +
               `${specializationEmoji} #${post.specialization} #–º–µ–¥–∏—Ü–∏–Ω–∞ #–∫–ª–∏–Ω–∏—á–µ—Å–∫–∞—è–ø—Ä–∞–∫—Ç–∏–∫–∞`;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–∞ –ø–æ—Å—Ç–∞
     */
    getPostEmoji(type) {
        const emojis = {
            'research': 'üî¨',
            'guideline': 'üìã',
            'news': 'üì∞',
            'update': 'üîÑ',
            'practical': 'üí°',
            'case': 'üìù',
            'general': 'üè•'
        };
        return emojis[type] || 'üè•';
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
     */
    getSpecializationEmoji(specialization) {
        const emojis = {
            'cardiology': '‚ù§Ô∏è',
            'endocrinology': 'ü©∫',
            'pediatrics': 'üë∂',
            'gastroenterology': 'ü´Ä',
            'gynecology': 'üë©',
            'neurology': 'üß†',
            'therapy': 'ü©π'
        };
        return emojis[specialization] || 'üè•';
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤
     */
    formatKeyPoints(keyPoints) {
        if (!keyPoints || keyPoints.length === 0) {
            return '‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—É–¥–µ—Ç –¥–æ–ø–æ–ª–Ω–µ–Ω–∞';
        }
        
        return keyPoints.map(point => `‚Ä¢ ${point}`).join('\n');
    }

    /**
     * –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞
     */
    async run() {
        try {
            await this.database.initialize();
            await this.publishApprovedPosts();
        } catch (error) {
            this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:', error);
        }
    }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    const publisher = new PostPublisher();
    publisher.run();
}

module.exports = PostPublisher;
