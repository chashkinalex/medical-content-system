#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π —Å–∏—Å—Ç–µ–º—ã
 */

const Database = require('../src/utils/database');
const Logger = require('../src/utils/logger');
const path = require('path');

class DatabaseSchemaUpdater {
    constructor() {
        this.logger = new Logger();
        this.database = new Database();
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
     */
    async updateSchema() {
        try {
            this.logger.info('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            await this.database.initialize();

            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü
            await this.updateExistingTables();

            // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü
            await this.createNewTables();

            // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤
            await this.createNewIndexes();

            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            await this.updateSettings();

            this.logger.info('‚úÖ –°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!');

        } catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
            throw error;
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü
     */
    async updateExistingTables() {
        this.logger.info('üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü...');

        const updates = [
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã sources
            {
                table: 'sources',
                columns: [
                    'ADD COLUMN IF NOT EXISTS tags TEXT',
                    'ADD COLUMN IF NOT EXISTS update_interval INTEGER DEFAULT 3600000',
                    'ADD COLUMN IF NOT EXISTS last_error TEXT',
                    'ADD COLUMN IF NOT EXISTS error_count INTEGER DEFAULT 0',
                    'ADD COLUMN IF NOT EXISTS success_count INTEGER DEFAULT 0'
                ]
            },

            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã articles
            {
                table: 'articles',
                columns: [
                    'ADD COLUMN IF NOT EXISTS content_hash TEXT',
                    'ADD COLUMN IF NOT EXISTS word_count INTEGER',
                    'ADD COLUMN IF NOT EXISTS reading_time INTEGER',
                    'ADD COLUMN IF NOT EXISTS language TEXT DEFAULT "unknown"',
                    'ADD COLUMN IF NOT EXISTS content_type TEXT DEFAULT "general"',
                    'ADD COLUMN IF NOT EXISTS content_category TEXT',
                    'ADD COLUMN IF NOT EXISTS keywords TEXT',
                    'ADD COLUMN IF NOT EXISTS quality_score INTEGER DEFAULT 0',
                    'ADD COLUMN IF NOT EXISTS processed_date DATETIME',
                    'ADD COLUMN IF NOT EXISTS scored_date DATETIME',
                    'ADD COLUMN IF NOT EXISTS source_name TEXT',
                    'ADD COLUMN IF NOT EXISTS source_url TEXT'
                ]
            },

            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã posts
            {
                table: 'posts',
                columns: [
                    'ADD COLUMN IF NOT EXISTS specialization TEXT',
                    'ADD COLUMN IF NOT EXISTS post_type TEXT DEFAULT "research"',
                    'ADD COLUMN IF NOT EXISTS summary TEXT',
                    'ADD COLUMN IF NOT EXISTS key_points TEXT',
                    'ADD COLUMN IF NOT EXISTS practical_application TEXT',
                    'ADD COLUMN IF NOT EXISTS hashtags TEXT',
                    'ADD COLUMN IF NOT EXISTS word_count INTEGER',
                    'ADD COLUMN IF NOT EXISTS reading_time INTEGER',
                    'ADD COLUMN IF NOT EXISTS generated_date DATETIME',
                    'ADD COLUMN IF NOT EXISTS moderation_status TEXT DEFAULT "pending"',
                    'ADD COLUMN IF NOT EXISTS moderator_id TEXT',
                    'ADD COLUMN IF NOT EXISTS moderator_decision TEXT',
                    'ADD COLUMN IF NOT EXISTS moderator_notes TEXT',
                    'ADD COLUMN IF NOT EXISTS decision_date DATETIME',
                    'ADD COLUMN IF NOT EXISTS revision_comment TEXT',
                    'ADD COLUMN IF NOT EXISTS revision_status TEXT DEFAULT "none"',
                    'ADD COLUMN IF NOT EXISTS comments INTEGER DEFAULT 0',
                    'ADD COLUMN IF NOT EXISTS forwards INTEGER DEFAULT 0'
                ]
            },

            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã scoring
            {
                table: 'scoring',
                columns: [
                    'ADD COLUMN IF NOT EXISTS scientific_basis INTEGER DEFAULT 0',
                    'ADD COLUMN IF NOT EXISTS relevance INTEGER DEFAULT 0',
                    'ADD COLUMN IF NOT EXISTS practicality INTEGER DEFAULT 0',
                    'ADD COLUMN IF NOT EXISTS quality_level TEXT DEFAULT "D"',
                    'ADD COLUMN IF NOT EXISTS breakdown TEXT',
                    'ADD COLUMN IF NOT EXISTS source_quality INTEGER DEFAULT 0',
                    'ADD COLUMN IF NOT EXISTS evidence_level INTEGER DEFAULT 0',
                    'ADD COLUMN IF NOT EXISTS freshness INTEGER DEFAULT 0',
                    'ADD COLUMN IF NOT EXISTS clinical_applicability INTEGER DEFAULT 0',
                    'ADD COLUMN IF NOT EXISTS methodology_quality INTEGER DEFAULT 0'
                ]
            }
        ];

        for (const update of updates) {
            for (const column of update.columns) {
                try {
                    await this.database.run(`ALTER TABLE ${update.table} ${column}`);
                    this.logger.info(`  ‚úÖ ${update.table}: ${column}`);
                } catch (error) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    if (!error.message.includes('duplicate column name')) {
                        this.logger.warn(`  ‚ö†Ô∏è ${update.table}: ${column} - ${error.message}`);
                    }
                }
            }
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü
     */
    async createNewTables() {
        this.logger.info('üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü...');

        const newTables = [
            // –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ –ø—Ä–µ–º–æ–¥–µ—Ä–∞—Ü–∏–∏
            `CREATE TABLE IF NOT EXISTS moderation_queue (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                post_id INTEGER NOT NULL,
                content TEXT NOT NULL,
                specialization TEXT NOT NULL,
                score INTEGER NOT NULL,
                source_url TEXT,
                created_date DATETIME DEFAULT CURRENT_TIMESTAMP,
                status TEXT DEFAULT 'pending',
                moderator_decision TEXT,
                moderator_notes TEXT,
                decision_date DATETIME,
                FOREIGN KEY (post_id) REFERENCES posts (id)
            )`,

            // –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ –¥–æ—Ä–∞–±–æ—Ç–∫–∏
            `CREATE TABLE IF NOT EXISTS revision_queue (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                post_id INTEGER NOT NULL,
                original_content TEXT NOT NULL,
                revision_notes TEXT,
                revision_comment TEXT,
                status TEXT DEFAULT 'pending',
                created_date DATETIME DEFAULT CURRENT_TIMESTAMP,
                completed_date DATETIME,
                FOREIGN KEY (post_id) REFERENCES posts (id)
            )`,

            // –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –º–µ—Ç—Ä–∏–∫ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è–º
            `CREATE TABLE IF NOT EXISTS specialization_metrics (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                specialization TEXT NOT NULL,
                date DATE NOT NULL,
                articles_count INTEGER DEFAULT 0,
                posts_count INTEGER DEFAULT 0,
                published_count INTEGER DEFAULT 0,
                average_score REAL DEFAULT 0,
                moderation_count INTEGER DEFAULT 0,
                revision_count INTEGER DEFAULT 0,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                UNIQUE(specialization, date)
            )`,

            // –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –ª–æ–≥–æ–≤ —Å–∏—Å—Ç–µ–º—ã
            `CREATE TABLE IF NOT EXISTS system_logs (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                level TEXT NOT NULL,
                message TEXT NOT NULL,
                component TEXT,
                data TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )`,

            // –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Telegram –±–æ—Ç–æ–≤
            `CREATE TABLE IF NOT EXISTS telegram_config (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                bot_type TEXT NOT NULL,
                bot_token TEXT NOT NULL,
                channel_id TEXT,
                enabled BOOLEAN DEFAULT 1,
                last_activity DATETIME,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )`,

            // –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π
            `CREATE TABLE IF NOT EXISTS publication_stats (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                post_id INTEGER NOT NULL,
                channel_id TEXT NOT NULL,
                message_id INTEGER,
                published_date DATETIME NOT NULL,
                views INTEGER DEFAULT 0,
                likes INTEGER DEFAULT 0,
                comments INTEGER DEFAULT 0,
                forwards INTEGER DEFAULT 0,
                last_updated DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (post_id) REFERENCES posts (id)
            )`
        ];

        for (const table of newTables) {
            try {
                await this.database.run(table);
                const tableName = table.match(/CREATE TABLE IF NOT EXISTS (\w+)/)[1];
                this.logger.info(`  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞: ${tableName}`);
            } catch (error) {
                this.logger.error(`  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: ${error.message}`);
            }
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤
     */
    async createNewIndexes() {
        this.logger.info('üîç –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤...');

        const newIndexes = [
            // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Å—Ç–∞—Ç–µ–π
            'CREATE INDEX IF NOT EXISTS idx_articles_content_hash ON articles(content_hash)',
            'CREATE INDEX IF NOT EXISTS idx_articles_language ON articles(language)',
            'CREATE INDEX IF NOT EXISTS idx_articles_content_type ON articles(content_type)',
            'CREATE INDEX IF NOT EXISTS idx_articles_processed_date ON articles(processed_date)',
            'CREATE INDEX IF NOT EXISTS idx_articles_scored_date ON articles(scored_date)',

            // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø–æ—Å—Ç–æ–≤
            'CREATE INDEX IF NOT EXISTS idx_posts_specialization ON posts(specialization)',
            'CREATE INDEX IF NOT EXISTS idx_posts_post_type ON posts(post_type)',
            'CREATE INDEX IF NOT EXISTS idx_posts_moderation_status ON posts(moderation_status)',
            'CREATE INDEX IF NOT EXISTS idx_posts_generated_date ON posts(generated_date)',

            // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Å–∫–æ—Ä–∏–Ω–≥–∞
            'CREATE INDEX IF NOT EXISTS idx_scoring_quality_level ON scoring(quality_level)',
            'CREATE INDEX IF NOT EXISTS idx_scoring_total_score ON scoring(total_score)',

            // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ –ø—Ä–µ–º–æ–¥–µ—Ä–∞—Ü–∏–∏
            'CREATE INDEX IF NOT EXISTS idx_moderation_queue_status ON moderation_queue(status)',
            'CREATE INDEX IF NOT EXISTS idx_moderation_queue_specialization ON moderation_queue(specialization)',
            'CREATE INDEX IF NOT EXISTS idx_moderation_queue_created_date ON moderation_queue(created_date)',

            // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ—á–µ—Ä–µ–¥–∏ –¥–æ—Ä–∞–±–æ—Ç–∫–∏
            'CREATE INDEX IF NOT EXISTS idx_revision_queue_status ON revision_queue(status)',
            'CREATE INDEX IF NOT EXISTS idx_revision_queue_created_date ON revision_queue(created_date)',

            // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –º–µ—Ç—Ä–∏–∫
            'CREATE INDEX IF NOT EXISTS idx_specialization_metrics_specialization ON specialization_metrics(specialization)',
            'CREATE INDEX IF NOT EXISTS idx_specialization_metrics_date ON specialization_metrics(date)',

            // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –ª–æ–≥–æ–≤
            'CREATE INDEX IF NOT EXISTS idx_system_logs_level ON system_logs(level)',
            'CREATE INDEX IF NOT EXISTS idx_system_logs_component ON system_logs(component)',
            'CREATE INDEX IF NOT EXISTS idx_system_logs_created_at ON system_logs(created_at)',

            // –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–π
            'CREATE INDEX IF NOT EXISTS idx_publication_stats_channel_id ON publication_stats(channel_id)',
            'CREATE INDEX IF NOT EXISTS idx_publication_stats_published_date ON publication_stats(published_date)'
        ];

        for (const index of newIndexes) {
            try {
                await this.database.run(index);
                const indexName = index.match(/CREATE INDEX IF NOT EXISTS (\w+)/)[1];
                this.logger.info(`  ‚úÖ –°–æ–∑–¥–∞–Ω –∏–Ω–¥–µ–∫—Å: ${indexName}`);
            } catch (error) {
                this.logger.error(`  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞: ${error.message}`);
            }
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    async updateSettings() {
        this.logger.info('‚öôÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫...');

        const newSettings = [
            ['content_processing_batch_size', '50', '–†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞'],
            ['scoring_threshold_high', '20', '–ü–æ—Ä–æ–≥ –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ (—É—Ä–æ–≤–µ–Ω—å A)'],
            ['scoring_threshold_medium', '15', '–ü–æ—Ä–æ–≥ —Å—Ä–µ–¥–Ω–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ (—É—Ä–æ–≤–µ–Ω—å B)'],
            ['scoring_threshold_low', '10', '–ü–æ—Ä–æ–≥ –Ω–∏–∑–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ (—É—Ä–æ–≤–µ–Ω—å C)'],
            ['max_posts_per_specialization', '5', '–ú–∞–∫—Å–∏–º—É–º –ø–æ—Å—Ç–æ–≤ –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –≤ –¥–µ–Ω—å'],
            ['moderation_session_duration', '120', '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏ –ø—Ä–µ–º–æ–¥–µ—Ä–∞—Ü–∏–∏ (–º–∏–Ω—É—Ç—ã)'],
            ['revision_session_frequency', '3', '–ß–∞—Å—Ç–æ—Ç–∞ —Å–µ—Å—Å–∏–π –¥–æ—Ä–∞–±–æ—Ç–∫–∏ (–¥–Ω–∏)'],
            ['telegram_posting_schedule', '8:00,14:00,20:00', '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram'],
            ['content_retention_processed', '90', '–°—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–¥–Ω–∏)'],
            ['content_retention_scored', '180', '–°—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ü–µ–Ω–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–¥–Ω–∏)'],
            ['duplicate_threshold', '0.85', '–ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏ –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏'],
            ['max_content_length', '50000', '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞'],
            ['min_content_length', '100', '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞'],
            ['supported_languages', 'ru,en', '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏'],
            ['quality_score_weights', '{"scientificBasis":0.4,"relevance":0.35,"practicality":0.25}', '–í–µ—Å–∞ –¥–ª—è —Å–∫–æ—Ä–∏–Ω–≥–∞ –∫–∞—á–µ—Å—Ç–≤–∞']
        ];

        for (const [key, value, description] of newSettings) {
            try {
                await this.database.run(
                    'INSERT OR IGNORE INTO settings (key, value, description) VALUES (?, ?, ?)',
                    [key, value, description]
                );
                this.logger.info(`  ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞: ${key}`);
            } catch (error) {
                this.logger.error(`  ‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ${key}: ${error.message}`);
            }
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Å—Ö–µ–º—ã
     */
    async validateSchema() {
        this.logger.info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Å—Ö–µ–º—ã...');

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
            const requiredTables = [
                'sources', 'articles', 'posts', 'scoring', 'metrics', 'settings',
                'moderation_queue', 'revision_queue', 'specialization_metrics',
                'system_logs', 'telegram_config', 'publication_stats'
            ];

            for (const table of requiredTables) {
                const result = await this.database.get(
                    `SELECT name FROM sqlite_master WHERE type='table' AND name=?`,
                    [table]
                );
                
                if (result) {
                    this.logger.info(`  ‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${table} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
                } else {
                    this.logger.error(`  ‚ùå –¢–∞–±–ª–∏—Ü–∞ ${table} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
                }
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏
            const criticalColumns = [
                { table: 'articles', column: 'content_hash' },
                { table: 'articles', column: 'language' },
                { table: 'articles', column: 'content_type' },
                { table: 'posts', column: 'specialization' },
                { table: 'posts', column: 'moderation_status' },
                { table: 'scoring', column: 'scientific_basis' },
                { table: 'scoring', column: 'relevance' },
                { table: 'scoring', column: 'practicality' }
            ];

            for (const { table, column } of criticalColumns) {
                const result = await this.database.get(
                    `PRAGMA table_info(${table}) WHERE name=?`,
                    [column]
                );
                
                if (result) {
                    this.logger.info(`  ‚úÖ –ö–æ–ª–æ–Ω–∫–∞ ${table}.${column} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
                } else {
                    this.logger.error(`  ‚ùå –ö–æ–ª–æ–Ω–∫–∞ ${table}.${column} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
                }
            }

            this.logger.info('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

        } catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏:', error);
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
     */
    async createBackup() {
        try {
            const backupPath = path.join(__dirname, '../data/backup_' + Date.now() + '.db');
            await this.database.backup(backupPath);
            this.logger.info(`üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: ${backupPath}`);
            return backupPath;
        } catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:', error);
            throw error;
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    async run() {
        try {
            const args = process.argv.slice(2);
            
            if (args.includes('--backup')) {
                await this.createBackup();
            }
            
            await this.updateSchema();
            await this.validateSchema();
            
            this.logger.info('üéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
            
        } catch (error) {
            this.logger.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ö–µ–º—ã:', error);
            process.exit(1);
        }
    }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    const updater = new DatabaseSchemaUpdater();
    updater.run();
}

module.exports = DatabaseSchemaUpdater;
