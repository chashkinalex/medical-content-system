#!/usr/bin/env node

/**
 * Medical Content System
 * –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–æ–≤
 * 
 * @author chashkinalex
 * @version 1.0.0
 */

const fs = require('fs');
const path = require('path');
require('dotenv').config();

// –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π —Å–∏—Å—Ç–µ–º—ã
const Logger = require('./src/utils/logger');
const Database = require('./src/utils/database');
const ContentCollector = require('./src/collectors/content-collector');
const ContentProcessor = require('./src/processors/content-processor');
const ContentScorer = require('./src/scorers/content-scorer');
const PostGenerator = require('./src/generators/post-generator');
const TelegramPublisher = require('./src/publishers/telegram-publisher');
const Monitor = require('./src/utils/monitor');

class MedicalContentSystem {
    constructor() {
        this.logger = new Logger();
        this.database = new Database();
        this.collector = new ContentCollector();
        this.processor = new ContentProcessor();
        this.scorer = new ContentScorer();
        this.generator = new PostGenerator();
        this.publisher = new TelegramPublisher();
        this.monitor = new Monitor();
        
        this.isRunning = false;
        this.config = this.loadConfig();
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     */
    loadConfig() {
        try {
            const configPath = path.join(__dirname, 'config');
            const rssFeeds = JSON.parse(fs.readFileSync(path.join(configPath, 'rss-feeds.json'), 'utf8'));
            const postTemplates = JSON.parse(fs.readFileSync(path.join(configPath, 'post-templates.json'), 'utf8'));
            
            return {
                rssFeeds,
                postTemplates,
                scoring: {
                    threshold: parseInt(process.env.SCORING_THRESHOLD) || 14,
                    max: parseInt(process.env.SCORING_MAX) || 25
                },
                telegram: {
                    botToken: process.env.TELEGRAM_BOT_TOKEN,
                    channelId: process.env.TELEGRAM_CHANNEL_ID,
                    adminId: process.env.TELEGRAM_ADMIN_ID
                },
                database: {
                    url: process.env.DATABASE_URL || 'sqlite:./data/content.db'
                }
            };
        } catch (error) {
            this.logger.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error);
            throw error;
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
     */
    async initialize() {
        try {
            this.logger.info('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Medical Content System...');
            
            // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
            await this.createDirectories();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            await this.database.initialize(this.config.database.url);
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            await this.collector.initialize(this.config.rssFeeds);
            await this.processor.initialize(this.config.postTemplates);
            await this.scorer.initialize(this.config.scoring);
            await this.generator.initialize(this.config.postTemplates);
            await this.publisher.initialize(this.config.telegram);
            await this.monitor.initialize();
            
            this.logger.info('‚úÖ –°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
            return true;
        } catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã:', error);
            throw error;
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
     */
    async createDirectories() {
        const directories = [
            'data',
            'logs',
            'cache',
            'output',
            'backups',
            'templates',
            'visuals'
        ];

        for (const dir of directories) {
            const dirPath = path.join(__dirname, dir);
            if (!fs.existsSync(dirPath)) {
                fs.mkdirSync(dirPath, { recursive: true });
                this.logger.info(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${dir}`);
            }
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã
     */
    async start() {
        try {
            await this.initialize();
            this.isRunning = true;
            
            this.logger.info('üè• Medical Content System –∑–∞–ø—É—â–µ–Ω–∞');
            this.logger.info('üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
            this.logger.info('  - collect: –°–±–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤');
            this.logger.info('  - process: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞');
            this.logger.info('  - score: –°–∫–æ—Ä–∏–Ω–≥ –∫–æ–Ω—Ç–µ–Ω—Ç–∞');
            this.logger.info('  - generate: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤');
            this.logger.info('  - publish: –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Telegram');
            this.logger.info('  - monitor: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤');
            this.logger.info('  - analytics: –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã');
            this.logger.info('  - help: –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º');
            
            // –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            await this.monitor.start();
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
            await this.handleCommands();
            
        } catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã:', error);
            process.exit(1);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
     */
    async handleCommands() {
        const args = process.argv.slice(2);
        const command = args[0];

        switch (command) {
            case 'collect':
                await this.runCollection();
                break;
            case 'process':
                await this.runProcessing();
                break;
            case 'score':
                await this.runScoring();
                break;
            case 'generate':
                await this.runGeneration();
                break;
            case 'publish':
                await this.runPublishing();
                break;
            case 'monitor':
                await this.runMonitoring();
                break;
            case 'analytics':
                await this.runAnalytics();
                break;
            case 'help':
                this.showHelp();
                break;
            default:
                this.logger.info('üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É "help" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥');
                break;
        }
    }

    /**
     * –°–±–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞
     */
    async runCollection() {
        this.logger.info('üì• –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...');
        try {
            const results = await this.collector.collectAll();
            this.logger.info(`‚úÖ –°–æ–±—Ä–∞–Ω–æ ${results.length} –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π`);
        } catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', error);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
     */
    async runProcessing() {
        this.logger.info('‚öôÔ∏è –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...');
        try {
            const results = await this.processor.processAll();
            this.logger.info(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${results.length} —Å—Ç–∞—Ç–µ–π`);
        } catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', error);
        }
    }

    /**
     * –°–∫–æ—Ä–∏–Ω–≥ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
     */
    async runScoring() {
        this.logger.info('üìä –ó–∞–ø—É—Å–∫ —Å–∫–æ—Ä–∏–Ω–≥–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...');
        try {
            const results = await this.scorer.scoreAll();
            this.logger.info(`‚úÖ –û—Ü–µ–Ω–µ–Ω–æ ${results.length} —Å—Ç–∞—Ç–µ–π`);
        } catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ —Å–∫–æ—Ä–∏–Ω–≥–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', error);
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤
     */
    async runGeneration() {
        this.logger.info('‚úçÔ∏è –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤...');
        try {
            const results = await this.generator.generateAll();
            this.logger.info(`‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${results.length} –ø–æ—Å—Ç–æ–≤`);
        } catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤:', error);
        }
    }

    /**
     * –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Telegram
     */
    async runPublishing() {
        this.logger.info('üì§ –ó–∞–ø—É—Å–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram...');
        try {
            const results = await this.publisher.publishAll();
            this.logger.info(`‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ ${results.length} –ø–æ—Å—Ç–æ–≤`);
        } catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:', error);
        }
    }

    /**
     * –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
     */
    async runMonitoring() {
        this.logger.info('üëÅÔ∏è –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...');
        try {
            const results = await this.monitor.checkAllSources();
            this.logger.info(`‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ ${results.length} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤`);
        } catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error);
        }
    }

    /**
     * –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã
     */
    async runAnalytics() {
        this.logger.info('üìà –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...');
        try {
            const results = await this.generateAnalytics();
            this.logger.info('‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞');
            console.log(results);
        } catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:', error);
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
     */
    async generateAnalytics() {
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        return {
            totalArticles: 0,
            publishedPosts: 0,
            averageScore: 0,
            topSources: [],
            topTopics: []
        };
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
     */
    showHelp() {
        console.log(`
üè• Medical Content System - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º

üì• collect    - –°–±–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ RSS-—Ñ–∏–¥–æ–≤ –∏ PubMed
‚öôÔ∏è process    - –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
üìä score      - –°–∫–æ—Ä–∏–Ω–≥ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –∫–∞—á–µ—Å—Ç–≤–∞
‚úçÔ∏è generate   - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤ –ø–æ —à–∞–±–ª–æ–Ω–∞–º
üì§ publish    - –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤ –≤ Telegram
üëÅÔ∏è monitor    - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
üìà analytics  - –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã –ø–æ —Å–∏—Å—Ç–µ–º–µ
‚ùì help       - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  node index.js collect
  node index.js process
  node index.js score
  node index.js generate
  node index.js publish

–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:
  npm run collect && npm run process && npm run score && npm run generate && npm run publish
        `);
    }

    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã
     */
    async stop() {
        this.logger.info('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã...');
        this.isRunning = false;
        await this.monitor.stop();
        await this.database.close();
        this.logger.info('‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', async () => {
    console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
    if (global.medicalContentSystem) {
        await global.medicalContentSystem.stop();
    }
    process.exit(0);
});

process.on('SIGTERM', async () => {
    console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...');
    if (global.medicalContentSystem) {
        await global.medicalContentSystem.stop();
    }
    process.exit(0);
});

// –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã
if (require.main === module) {
    const system = new MedicalContentSystem();
    global.medicalContentSystem = system;
    system.start().catch(error => {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
        process.exit(1);
    });
}

module.exports = MedicalContentSystem;
