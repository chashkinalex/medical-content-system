version: '3.8'

services:
  # Основное приложение
  app:
    build: .
    container_name: medical-content-app
    restart: unless-stopped
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./config:/app/config
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@database:5432/medical_content
      - REDIS_URL=redis://redis:6379
    depends_on:
      - database
      - redis
    networks:
      - medical-network

  # База данных PostgreSQL
  database:
    image: postgres:15-alpine
    container_name: medical-content-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=medical_content
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - medical-network

  # Redis для кэширования и очередей
  redis:
    image: redis:7-alpine
    container_name: medical-content-redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - medical-network

  # Telegram бот для премодерации
  moderation-bot:
    build: .
    container_name: medical-moderation-bot
    restart: unless-stopped
    command: node src/bots/moderation-bot.js
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./config:/app/config
    environment:
      - NODE_ENV=production
      - TELEGRAM_BOT_TOKEN=${MODERATION_BOT_TOKEN}
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@database:5432/medical_content
      - REDIS_URL=redis://redis:6379
    depends_on:
      - database
      - redis
    networks:
      - medical-network

  # Telegram бот для публикации
  publishing-bot:
    build: .
    container_name: medical-publishing-bot
    restart: unless-stopped
    command: node src/bots/publishing-bot.js
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./config:/app/config
    environment:
      - NODE_ENV=production
      - TELEGRAM_BOT_TOKEN=${PUBLISHING_BOT_TOKEN}
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@database:5432/medical_content
      - REDIS_URL=redis://redis:6379
    depends_on:
      - database
      - redis
    networks:
      - medical-network

  # Nginx веб-сервер
  nginx:
    image: nginx:alpine
    container_name: medical-content-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - app
    networks:
      - medical-network

  # Мониторинг
  monitoring:
    image: prom/prometheus:latest
    container_name: medical-content-monitoring
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - medical-network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:

networks:
  medical-network:
    driver: bridge
